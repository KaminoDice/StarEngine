!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Amplitude	effect/Perlin.h	/^    double Amplitude()   const { return amplitude;   }$/;"	f	class:PerlinNoise
CHECK_ZERO	effect/Fluid.cpp	306;"	d	file:
COLOR_H	math/Color.h	2;"	d
Color3	math/Color.h	/^		Color3()$/;"	f	class:Color3
Color3	math/Color.h	/^		Color3(__COLOR__TYPE__ rgb)$/;"	f	class:Color3
Color3	math/Color.h	/^		Color3(const Color3& newColor)$/;"	f	class:Color3
Color3	math/Color.h	/^		Color3(const __COLOR__TYPE__ _r,const __COLOR__TYPE__ _g,const __COLOR__TYPE__ _b)$/;"	f	class:Color3
Color3	math/Color.h	/^class Color3$/;"	c
Color4	math/Color.h	/^		Color4()$/;"	f	class:Color4
Color4	math/Color.h	/^		Color4(const Color4& newColor)$/;"	f	class:Color4
Color4	math/Color.h	/^		Color4(const __COLOR__TYPE__ _r,const __COLOR__TYPE__ _g,const __COLOR__TYPE__ _b,const __COLOR__TYPE__ _a)$/;"	f	class:Color4
Color4	math/Color.h	/^		Color4(float rgb)$/;"	f	class:Color4
Color4	math/Color.h	/^class Color4$/;"	c
CreateProgram	renderer/StarShader.cpp	/^unsigned int StarShader::CreateProgram(	GLuint* const pProgramObject,$/;"	f	class:StarShader
Create_Texture_ANDROID	renderer/StarTexture.cpp	/^StarTexture StarTexture::Create_Texture_ANDROID(int * array,int texture_width, int texture_height)$/;"	f	class:StarTexture
Create_Texture_CAM_ANDROID	renderer/StarTexture.cpp	/^StarTexture StarTexture::Create_Texture_CAM_ANDROID(char * camData,int texture_width,int texture_height)$/;"	f	class:StarTexture
Create_Texture_FBO_FIRST	renderer/StarTexture.cpp	/^StarTexture StarTexture::Create_Texture_FBO_FIRST( int texture_width, int texture_height)$/;"	f	class:StarTexture
Create_Texture_FBO_SECOND	renderer/StarTexture.cpp	/^StarTexture StarTexture::Create_Texture_FBO_SECOND(int texture_width, int texture_height)$/;"	f	class:StarTexture
Create_Texture_FBO_THIRD	renderer/StarTexture.cpp	/^StarTexture StarTexture::Create_Texture_FBO_THIRD(int texture_width, int texture_height)$/;"	f	class:StarTexture
Create_Texture_IOS	renderer/StarTexture.cpp	/^StarTexture StarTexture::Create_Texture_IOS(NSString *filename)$/;"	f	class:StarTexture
Create_Texture_PIXEL	renderer/StarTexture.cpp	/^StarTexture StarTexture::Create_Texture_PIXEL(char* pixel,int texture_width,int texture_height)$/;"	f	class:StarTexture
Delete_Texture	renderer/StarTexture.cpp	/^void StarTexture::Delete_Texture(StarTexture Texture)$/;"	f	class:StarTexture
FAIL	renderer/StarShader.cpp	7;"	d	file:
FLUID_DEFAULT_COLOR_DIFFUSION	effect/Fluid.h	12;"	d
FLUID_DEFAULT_DT	effect/Fluid.h	10;"	d
FLUID_DEFAULT_FADESPEED	effect/Fluid.h	13;"	d
FLUID_DEFAULT_NX	effect/Fluid.h	8;"	d
FLUID_DEFAULT_NY	effect/Fluid.h	9;"	d
FLUID_DEFAULT_SOLVER_ITERATIONS	effect/Fluid.h	14;"	d
FLUID_DEFAULT_VISC	effect/Fluid.h	11;"	d
FLUID_IX	effect/Fluid.h	16;"	d
FluidCube	effect/Fluid3D.h	/^struct FluidCube {$/;"	s
FluidCubeAddDensity	effect/Fluid3D.cpp	/^void FluidCubeAddDensity(FluidCube *cube, int x, int y, int z, float amount)$/;"	f
FluidCubeAddVelocity	effect/Fluid3D.cpp	/^void FluidCubeAddVelocity(FluidCube *cube, int x, int y, int z, float amountX, float amountY, float amountZ)$/;"	f
FluidCubeCreate	effect/Fluid3D.cpp	/^FluidCube *FluidCubeCreate(int size, int diffusion, int viscosity, float dt)$/;"	f
FluidCubeFree	effect/Fluid3D.cpp	/^void FluidCubeFree(FluidCube *cube)$/;"	f
FluidCubeStep	effect/Fluid3D.cpp	/^void FluidCubeStep(FluidCube *cube)$/;"	f
Frequency	effect/Perlin.h	/^    double Frequency()   const { return frequency;   }$/;"	f	class:PerlinNoise
GetHeight	effect/Perlin.cpp	/^double PerlinNoise::GetHeight(double x, double y) const$/;"	f	class:PerlinNoise
GetValue	effect/Perlin.cpp	/^double PerlinNoise::GetValue(double x, double y) const$/;"	f	class:PerlinNoise
IX	effect/Fluid3D.h	4;"	d
Interpolate	effect/Perlin.cpp	/^double PerlinNoise::Interpolate(double x, double y, double a) const$/;"	f	class:PerlinNoise
LOGE	StarMain.h	35;"	d
LOGI	StarMain.h	34;"	d
LOG_TAG	StarMain.h	33;"	d
MATRIX_H	math/Matrix.h	2;"	d
MAX_FINGERS	tool/StarTouch.h	5;"	d
Matrix	math/Matrix.h	/^class Matrix$/;"	c
Matrix_Identity	math/Matrix.cpp	/^void Matrix_Identity( Matrix& out_M)$/;"	f
Matrix_MxM	math/Matrix.cpp	/^void Matrix_MxM( Matrix& out_M, const Matrix& in_M1, const Matrix& in_M2)$/;"	f
Matrix_MxM_NEON	math/Matrix.cpp	/^void Matrix_MxM_NEON(__MATRIX__TYPE__ * out_M, const __MATRIX__TYPE__* in_M1, const __MATRIX__TYPE__* in_M2)$/;"	f
Matrix_MxV	math/Matrix.cpp	/^void Matrix_MxV( Vec4& out_V, const Vec4& in_V, const Matrix& in_M)$/;"	f
Matrix_MxV_NEON	math/Matrix.cpp	/^void Matrix_MxV_NEON(__VERTEX__TYPE__* out_V, const __VERTEX__TYPE__* in_V, const __MATRIX__TYPE__* in_M)$/;"	f
Matrix_Ortho	math/Matrix.cpp	/^void Matrix_Ortho( Matrix& out_M, const float width, const float height, const float nZ, const float fZ, const bool ROT)$/;"	f
Matrix_RotationX	math/Matrix.cpp	/^void Matrix_RotationX(Matrix	&out_M,const float angle)$/;"	f
Matrix_RotationY	math/Matrix.cpp	/^void Matrix_RotationY(Matrix	&out_M, const float angle)$/;"	f
Matrix_RotationZ	math/Matrix.cpp	/^void Matrix_RotationZ( Matrix	&out_M, const float angle)$/;"	f
Matrix_Scaling	math/Matrix.cpp	/^void Matrix_Scaling( Matrix& out_M, const float x, const float y, const float z)$/;"	f
Matrix_Translation	math/Matrix.cpp	/^void Matrix_Translation( Matrix& out_M, const float x, const float y, const float z)$/;"	f
NO_NEON	star.h	7;"	d
Noise	effect/Perlin.cpp	/^double PerlinNoise::Noise(int x, int y) const$/;"	f	class:PerlinNoise
Octaves	effect/Perlin.h	/^    int    Octaves()     const { return octaves;     }$/;"	f	class:PerlinNoise
PerlinNoise	effect/Perlin.cpp	/^PerlinNoise::PerlinNoise()$/;"	f	class:PerlinNoise
PerlinNoise	effect/Perlin.cpp	/^PerlinNoise::PerlinNoise(double _persistence, double _frequency, double _amplitude, int _octaves, int _randomseed)$/;"	f	class:PerlinNoise
PerlinNoise	effect/Perlin.h	/^class PerlinNoise$/;"	c
Persistence	effect/Perlin.h	/^    double Persistence() const { return persistence; }$/;"	f	class:PerlinNoise
RandomSeed	effect/Perlin.h	/^    int    RandomSeed()  const { return randomseed;  }$/;"	f	class:PerlinNoise
STARMATH_H	math/StarMath.h	2;"	d
STARUTIL_H	tool/StarUtil.h	2;"	d
STAR_EFFECT_H	effect/StarEffect.h	2;"	d
STAR_FLUID_H	effect/Fluid.h	2;"	d
STAR_FLUID_H	effect/Fluid3D.h	2;"	d
STAR_H	star.h	2;"	d
STAR_PERLIN_H	effect/Perlin.h	2;"	d
SUCCESS	renderer/StarShader.cpp	6;"	d	file:
Set	effect/Perlin.cpp	/^void PerlinNoise::Set(double _persistence, double _frequency, double _amplitude, int _octaves, int _randomseed)$/;"	f	class:PerlinNoise
SetAmplitude	effect/Perlin.h	/^    void SetAmplitude(  double _amplitude)   { amplitude = _amplitude;     }$/;"	f	class:PerlinNoise
SetFrequency	effect/Perlin.h	/^    void SetFrequency(  double _frequency)   { frequency = _frequency;     }$/;"	f	class:PerlinNoise
SetOctaves	effect/Perlin.h	/^    void SetOctaves(    int    _octaves)     { octaves = _octaves;         }$/;"	f	class:PerlinNoise
SetPersistence	effect/Perlin.h	/^    void SetPersistence(double _persistence) { persistence = _persistence; }$/;"	f	class:PerlinNoise
SetRandomSeed	effect/Perlin.h	/^    void SetRandomSeed( int    _randomseed)  { randomseed = _randomseed;   }$/;"	f	class:PerlinNoise
ShaderLoadSourceFromMemory	renderer/StarShader.cpp	/^unsigned int StarShader::ShaderLoadSourceFromMemory(	const char* pszShaderCode,$/;"	f	class:StarShader
StarEngine_Main_Header	StarMain.h	10;"	d
StarEngine_StarFBO_h	renderer/StarFBO.h	10;"	d
StarEngine_StarTexture_h	renderer/StarTexture.h	10;"	d
StarEngine_Timer	tool/StarTimer.h	3;"	d
StarFBO	renderer/StarFBO.cpp	/^StarFBO::StarFBO()$/;"	f	class:StarFBO
StarFBO	renderer/StarFBO.h	/^class StarFBO$/;"	c
StarFluid	effect/Fluid.cpp	/^StarFluid::StarFluid()$/;"	f	class:StarFluid
StarFluid	effect/Fluid.h	/^class StarFluid {$/;"	c
StarShader	renderer/StarShader.h	/^class StarShader$/;"	c
StarTexture	renderer/StarTexture.h	/^    StarTexture()$/;"	f	class:StarTexture
StarTexture	renderer/StarTexture.h	/^class StarTexture$/;"	c
StarTimer	tool/StarTimer.h	/^    StarTimer():time4Testing(0.f)$/;"	f	class:StarTimer
StarTimer	tool/StarTimer.h	/^class StarTimer$/;"	c
StarTouch	tool/StarTouch.h	/^class StarTouch$/;"	c
StarUtil	tool/StarUtil.h	/^class StarUtil$/;"	c
Total	effect/Perlin.cpp	/^double PerlinNoise::Total(double i, double j) const$/;"	f	class:PerlinNoise
VECTOR_H	math/Vector.h	3;"	d
Vec2	math/Vector.h	/^		Vec2(){}$/;"	f	class:Vec2
Vec2	math/Vector.h	/^		Vec2(const Vec2& in_Vector)$/;"	f	class:Vec2
Vec2	math/Vector.h	/^		Vec2(const __VERTEX__TYPE__ in_X,const __VERTEX__TYPE__ in_Y)$/;"	f	class:Vec2
Vec2	math/Vector.h	/^		Vec2(const __VERTEX__TYPE__ in_XY)$/;"	f	class:Vec2
Vec2	math/Vector.h	/^class Vec2$/;"	c
Vec3	math/Vector.h	/^		Vec3(){}$/;"	f	class:Vec3
Vec3	math/Vector.h	/^		Vec3(__VERTEX__TYPE__ in_X, __VERTEX__TYPE__ in_Y, __VERTEX__TYPE__ in_Z)$/;"	f	class:Vec3
Vec3	math/Vector.h	/^		Vec3(const __VERTEX__TYPE__ const_value)$/;"	f	class:Vec3
Vec3	math/Vector.h	/^		Vec3(const __VERTEX__TYPE__* pVector)$/;"	f	class:Vec3
Vec3	math/Vector.h	/^class Vec3$/;"	c
Vec4	math/Vector.h	/^		Vec4(){}$/;"	f	class:Vec4
Vec4	math/Vector.h	/^		Vec4(const Vec3& in_V, const __VERTEX__TYPE__ s)$/;"	f	class:Vec4
Vec4	math/Vector.h	/^		Vec4(const __VERTEX__TYPE__ in_X,const  __VERTEX__TYPE__ in_Y,const __VERTEX__TYPE__ in_Z,const  __VERTEX__TYPE__ in_W)$/;"	f	class:Vec4
Vec4	math/Vector.h	/^		Vec4(const __VERTEX__TYPE__ in_XYZW)$/;"	f	class:Vec4
Vec4	math/Vector.h	/^		Vec4(const __VERTEX__TYPE__ s, const Vec3& in_V)$/;"	f	class:Vec4
Vec4	math/Vector.h	/^		Vec4(const __VERTEX__TYPE__* pVector)$/;"	f	class:Vec4
Vec4	math/Vector.h	/^class Vec4$/;"	c
Vx	effect/Fluid3D.h	/^    float *Vx;$/;"	m	struct:FluidCube
Vx0	effect/Fluid3D.h	/^    float *Vx0;$/;"	m	struct:FluidCube
Vy	effect/Fluid3D.h	/^    float *Vy;$/;"	m	struct:FluidCube
Vy0	effect/Fluid3D.h	/^    float *Vy0;$/;"	m	struct:FluidCube
Vz	effect/Fluid3D.h	/^    float *Vz;$/;"	m	struct:FluidCube
Vz0	effect/Fluid3D.h	/^    float *Vz0;$/;"	m	struct:FluidCube
YES_NEON	star.h	5;"	d
ZERO_THRESH	effect/Fluid.cpp	305;"	d	file:
_0x0_	star.h	17;"	d
_0x1_	star.h	18;"	d
_0x2_	star.h	19;"	d
_0x3_	star.h	20;"	d
_1x0_	star.h	21;"	d
_1x1_	star.h	22;"	d
_1x2_	star.h	23;"	d
_1x3_	star.h	24;"	d
_2x0_	star.h	25;"	d
_2x1_	star.h	26;"	d
_2x2_	star.h	27;"	d
_2x3_	star.h	28;"	d
_3x0_	star.h	29;"	d
_3x1_	star.h	30;"	d
_3x2_	star.h	31;"	d
_3x3_	star.h	32;"	d
_Included_Shader	renderer/StarShader.h	3;"	d
_NX	effect/Fluid.h	/^    int		_NX, _NY, _numCells;$/;"	m	class:StarFluid
_NY	effect/Fluid.h	/^    int		_NX, _NY, _numCells;$/;"	m	class:StarFluid
__COLOR__TYPE__	star.h	13;"	d
__MATRIX__TYPE__	star.h	15;"	d
__S_C_A_L_A_R__	star.h	11;"	d
__VERTEX__TYPE__	star.h	14;"	d
_avgDensity	effect/Fluid.h	/^    float	_avgDensity;			\/\/ this will hold the average color of the last frame (how full it is)$/;"	m	class:StarFluid
_avgSpeed	effect/Fluid.h	/^    float	_avgSpeed;$/;"	m	class:StarFluid
_invNX	effect/Fluid.h	/^    float	_invNX, _invNY, _invNumCells;$/;"	m	class:StarFluid
_invNY	effect/Fluid.h	/^    float	_invNX, _invNY, _invNumCells;$/;"	m	class:StarFluid
_invNumCells	effect/Fluid.h	/^    float	_invNX, _invNY, _invNumCells;$/;"	m	class:StarFluid
_isInited	effect/Fluid.h	/^    bool	_isInited;$/;"	m	class:StarFluid
_numCells	effect/Fluid.h	/^    int		_NX, _NY, _numCells;$/;"	m	class:StarFluid
_tmp	effect/Fluid.h	/^    float	*_tmp;$/;"	m	class:StarFluid
_uniformity	effect/Fluid.h	/^    float	_uniformity;			\/\/ this will hold the _uniformity of the last frame (how uniform the color is);$/;"	m	class:StarFluid
a	math/Color.h	/^		__COLOR__TYPE__ a;$/;"	m	class:Color4
addColorAtCell	effect/Fluid.h	/^inline void StarFluid::addColorAtCell(int i, int j, const Vec3 &color) {$/;"	f	class:StarFluid
addColorAtIndex	effect/Fluid.h	/^inline void StarFluid::addColorAtIndex(int index, const Vec3 &color) {$/;"	f	class:StarFluid
addColorAtPos	effect/Fluid.h	/^inline void StarFluid::addColorAtPos(const Vec2 &pos, const Vec3 &color) {$/;"	f	class:StarFluid
addForceAtCell	effect/Fluid.h	/^inline void StarFluid::addForceAtCell(int i, int j, const Vec2 &force) {$/;"	f	class:StarFluid
addForceAtIndex	effect/Fluid.h	/^inline void StarFluid::addForceAtIndex(int index, const Vec2 &force) {$/;"	f	class:StarFluid
addForceAtPos	effect/Fluid.h	/^inline void StarFluid::addForceAtPos(const Vec2 &pos, const Vec2 &force) {$/;"	f	class:StarFluid
addSource	effect/Fluid.h	/^void StarFluid::addSource(T *x, T *x0) {$/;"	f	class:StarFluid
addToFluid	effect/Fluid.h	/^    void addToFluid( Vec2 pos, Vec2 vel, int id, bool addColor, bool addForce )$/;"	f	class:StarFluid
advect	effect/Fluid.cpp	/^void StarFluid::advect( int bound, float* d, const float* d0, const Vec2* duv) {$/;"	f	class:StarFluid
advect	effect/Fluid3D.cpp	/^static void advect(int b, float *d, float *d0,  float *velocX, float *velocY, float *velocZ, float dt, int N)$/;"	f	file:
advect2d	effect/Fluid.cpp	/^void StarFluid::advect2d( Vec2 *uv, const Vec2 *duv ) {$/;"	f	class:StarFluid
advectRGB	effect/Fluid.cpp	/^void StarFluid::advectRGB(int bound, const Vec2* duv) {$/;"	f	class:StarFluid
alloc	effect/Fluid.h	/^    float* alloc()	{ return new float[_numCells];	}$/;"	f	class:StarFluid
amplitude	effect/Perlin.h	/^    double persistence, frequency, amplitude;$/;"	m	class:PerlinNoise
b	math/Color.h	/^		__COLOR__TYPE__ b;$/;"	m	class:Color3
b	math/Color.h	/^		__COLOR__TYPE__ b;$/;"	m	class:Color4
b1_ColorRenderBuffer	renderer/StarFBO.h	/^    GLuint b1_ColorRenderBuffer;$/;"	m	class:StarFBO
b1_DepthRenderBuffer	renderer/StarFBO.h	/^    GLuint b1_DepthRenderBuffer;$/;"	m	class:StarFBO
b1_FrameBuffer	renderer/StarFBO.h	/^    GLuint b1_FrameBuffer;$/;"	m	class:StarFBO
b2_ColorRenderBuffer	renderer/StarFBO.h	/^    GLuint b2_ColorRenderBuffer;$/;"	m	class:StarFBO
b2_DepthRenderBuffer	renderer/StarFBO.h	/^    GLuint b2_DepthRenderBuffer;$/;"	m	class:StarFBO
b2_FrameBuffer	renderer/StarFBO.h	/^    GLuint b2_FrameBuffer;$/;"	m	class:StarFBO
b3_ColorRenderBuffer	renderer/StarFBO.h	/^    GLuint b3_ColorRenderBuffer;$/;"	m	class:StarFBO
b3_DepthRenderBuffer	renderer/StarFBO.h	/^    GLuint b3_DepthRenderBuffer;$/;"	m	class:StarFBO
b3_FrameBuffer	renderer/StarFBO.h	/^    GLuint b3_FrameBuffer;$/;"	m	class:StarFBO
bindingColorBackbufferFirst	renderer/StarFBO.cpp	/^void StarFBO::bindingColorBackbufferFirst()$/;"	f	class:StarFBO
bindingColorBackbufferRelease	renderer/StarFBO.cpp	/^void StarFBO::bindingColorBackbufferRelease()$/;"	f	class:StarFBO
bindingColorBackbufferSecond	renderer/StarFBO.cpp	/^void StarFBO::bindingColorBackbufferSecond()$/;"	f	class:StarFBO
bindingColorBackbufferThird	renderer/StarFBO.cpp	/^void StarFBO::bindingColorBackbufferThird()$/;"	f	class:StarFBO
bindingColorbuffer	renderer/StarFBO.cpp	/^void StarFBO::bindingColorbuffer()$/;"	f	class:StarFBO
bindingColorbufferRelease	renderer/StarFBO.cpp	/^void StarFBO::bindingColorbufferRelease()$/;"	f	class:StarFBO
bindingFrameBackbufferFirst	renderer/StarFBO.cpp	/^void StarFBO::bindingFrameBackbufferFirst()$/;"	f	class:StarFBO
bindingFrameBackbufferRelease	renderer/StarFBO.cpp	/^void StarFBO::bindingFrameBackbufferRelease()$/;"	f	class:StarFBO
bindingFrameBackbufferSecond	renderer/StarFBO.cpp	/^void StarFBO::bindingFrameBackbufferSecond()$/;"	f	class:StarFBO
bindingFrameBackbufferThird	renderer/StarFBO.cpp	/^void StarFBO::bindingFrameBackbufferThird()$/;"	f	class:StarFBO
bindingFramebuffer	renderer/StarFBO.cpp	/^void StarFBO::bindingFramebuffer()$/;"	f	class:StarFBO
bindingFramebufferRelease	renderer/StarFBO.cpp	/^void StarFBO::bindingFramebufferRelease()$/;"	f	class:StarFBO
calcCurl	effect/Fluid.cpp	/^float StarFluid::calcCurl( int i, int j)$/;"	f	class:StarFluid
color	effect/Fluid.h	/^    Vec3	*color, *colorOld;			\/\/ used for RGB$/;"	m	class:StarFluid
colorDiffusion	effect/Fluid.h	/^    float	colorDiffusion;$/;"	m	class:StarFluid
colorOld	effect/Fluid.h	/^    Vec3	*color, *colorOld;			\/\/ used for RGB$/;"	m	class:StarFluid
constrain	tool/StarUtil.h	/^T constrain(T c, T a, T b)$/;"	f
createFBO	renderer/StarFBO.cpp	/^void StarFBO::createFBO(bool depth, bool stencil,int width, int height)$/;"	f	class:StarFBO
createFBObyBackFirst	renderer/StarFBO.cpp	/^void StarFBO::createFBObyBackFirst(bool depth, bool stencil,int width, int height)$/;"	f	class:StarFBO
createFBObyBackSecond	renderer/StarFBO.cpp	/^void StarFBO::createFBObyBackSecond(bool depth, bool stencil,int width, int height)$/;"	f	class:StarFBO
createFBObyBackThird	renderer/StarFBO.cpp	/^void StarFBO::createFBObyBackThird(bool depth, bool stencil,int width, int height)$/;"	f	class:StarFBO
curl	effect/Fluid.h	/^    float	*curl;$/;"	m	class:StarFluid
deltaT	effect/Fluid.h	/^    float	deltaT;$/;"	m	class:StarFluid
density	effect/Fluid.h	/^    float	*density, *densityOld;		\/\/ used if not RGB$/;"	m	class:StarFluid
density	effect/Fluid3D.h	/^    float *density;$/;"	m	struct:FluidCube
densityOld	effect/Fluid.h	/^    float	*density, *densityOld;		\/\/ used if not RGB$/;"	m	class:StarFluid
destroy	effect/Fluid.cpp	/^void StarFluid::destroy() {$/;"	f	class:StarFluid
diff	effect/Fluid3D.h	/^    float diff;$/;"	m	struct:FluidCube
diffuse	effect/Fluid.cpp	/^void StarFluid::diffuse( int bound, float* c, float* c0, float diff )$/;"	f	class:StarFluid
diffuse	effect/Fluid3D.cpp	/^static void diffuse (int b, float *x, float *x0, float diff, float dt, int iter, int N)$/;"	f	file:
diffuseRGB	effect/Fluid.cpp	/^void StarFluid::diffuseRGB( int bound, float diff )$/;"	f	class:StarFluid
diffuseUV	effect/Fluid.cpp	/^void StarFluid::diffuseUV( float diff )$/;"	f	class:StarFluid
doRGB	effect/Fluid.h	/^    bool	doRGB;				\/\/ for monochrome, update only density$/;"	m	class:StarFluid
doVorticityConfinement	effect/Fluid.h	/^    bool	doVorticityConfinement;$/;"	m	class:StarFluid
dt	effect/Fluid3D.h	/^    float dt;$/;"	m	struct:FluidCube
enableRGB	effect/Fluid.cpp	/^StarFluid&  StarFluid::enableRGB(bool doRGB) {$/;"	f	class:StarFluid
enableVorticityConfinement	effect/Fluid.cpp	/^StarFluid&  StarFluid::enableVorticityConfinement(bool b) {$/;"	f	class:StarFluid
end	tool/StarTouch.h	/^	bool end;	$/;"	m	class:StarTouch
endTick	tool/StarTimer.cpp	/^void StarTimer::endTick()$/;"	f	class:StarTimer
fadeDensity	effect/Fluid.cpp	/^void StarFluid::fadeDensity() {$/;"	f	class:StarFluid
fadeRGB	effect/Fluid.cpp	/^void StarFluid::fadeRGB() {$/;"	f	class:StarFluid
fadeSpeed	effect/Fluid.h	/^    float	fadeSpeed;$/;"	m	class:StarFluid
fingers	tool/StarTouch.h	/^	unsigned int fingers;$/;"	m	class:StarTouch
frequency	effect/Perlin.h	/^    double persistence, frequency, amplitude;$/;"	m	class:PerlinNoise
g	math/Color.h	/^		__COLOR__TYPE__ g;$/;"	m	class:Color3
g	math/Color.h	/^		__COLOR__TYPE__ g;$/;"	m	class:Color4
getAvgDensity	effect/Fluid.cpp	/^float StarFluid::getAvgDensity() const {$/;"	f	class:StarFluid
getAvgSpeed	effect/Fluid.cpp	/^float StarFluid::getAvgSpeed() const {$/;"	f	class:StarFluid
getColorAtCell	effect/Fluid.h	/^inline Vec3 StarFluid::getColorAtCell(int i, int j) const {$/;"	f	class:StarFluid
getColorAtIndex	effect/Fluid.h	/^inline Vec3 StarFluid::getColorAtIndex(int index) const {$/;"	f	class:StarFluid
getColorAtPos	effect/Fluid.h	/^inline Vec3 StarFluid::getColorAtPos(const Vec2 &pos) const {$/;"	f	class:StarFluid
getColorDiffusion	effect/Fluid.cpp	/^float	StarFluid::getColorDiffusion()$/;"	f	class:StarFluid
getFPS	tool/StarTimer.cpp	/^void StarTimer::getFPS() $/;"	f	class:StarTimer
getHeight	effect/Fluid.cpp	/^int StarFluid::getHeight() const {$/;"	f	class:StarFluid
getIndexForCell	effect/Fluid.h	/^inline int StarFluid::getIndexForCell(int i, int j) const {$/;"	f	class:StarFluid
getIndexForPos	effect/Fluid.h	/^inline int StarFluid::getIndexForPos(const Vec2 &pos) const {$/;"	f	class:StarFluid
getInfoAtCell	effect/Fluid.h	/^inline void StarFluid::getInfoAtCell(int i, int j, Vec2 *vel, Vec3 *color) const {$/;"	f	class:StarFluid
getInfoAtIndex	effect/Fluid.h	/^inline	void StarFluid::getInfoAtIndex(int index, Vec2 *vel, Vec3 *color) const {$/;"	f	class:StarFluid
getInfoAtPos	effect/Fluid.h	/^inline void StarFluid::getInfoAtPos(const Vec2 &pos, Vec2 *vel, Vec3 *color) const {$/;"	f	class:StarFluid
getInvHeight	effect/Fluid.cpp	/^float StarFluid::getInvHeight() const {$/;"	f	class:StarFluid
getInvSize	effect/Fluid.cpp	/^Vec2 StarFluid::getInvSize() {$/;"	f	class:StarFluid
getInvWidth	effect/Fluid.cpp	/^float StarFluid::getInvWidth() const {$/;"	f	class:StarFluid
getNumCells	effect/Fluid.cpp	/^int StarFluid::getNumCells() const {$/;"	f	class:StarFluid
getSize	effect/Fluid.cpp	/^Vec2 StarFluid::getSize() {$/;"	f	class:StarFluid
getTime	tool/StarTimer.cpp	/^unsigned long long StarTimer::getTime()$/;"	f	class:StarTimer
getUniformity	effect/Fluid.cpp	/^float StarFluid::getUniformity() const {$/;"	f	class:StarFluid
getVelocityAtCell	effect/Fluid.h	/^inline Vec2 StarFluid::getVelocityAtCell(int i, int j) const {$/;"	f	class:StarFluid
getVelocityAtIndex	effect/Fluid.h	/^inline Vec2 StarFluid::getVelocityAtIndex(int index) const {$/;"	f	class:StarFluid
getVelocityAtPos	effect/Fluid.h	/^inline Vec2 StarFluid::getVelocityAtPos(const Vec2 &pos) const {$/;"	f	class:StarFluid
getVisc	effect/Fluid.cpp	/^float StarFluid::getVisc() const {$/;"	f	class:StarFluid
getVorticityConfinement	effect/Fluid.cpp	/^bool StarFluid::getVorticityConfinement() {$/;"	f	class:StarFluid
getWidth	effect/Fluid.cpp	/^int StarFluid::getWidth() const {$/;"	f	class:StarFluid
height	effect/Fluid.h	/^    float height;$/;"	m	class:StarFluid
invHeight	effect/Fluid.h	/^    float invHeight;$/;"	m	class:StarFluid
invWidth	effect/Fluid.h	/^    float invWidth;$/;"	m	class:StarFluid
isInited	effect/Fluid.cpp	/^bool StarFluid::isInited() const {$/;"	f	class:StarFluid
lerp	math/Color.cpp	/^void Color3::lerp(float t,Color3& newColor)$/;"	f	class:Color3
lerp	math/Color.cpp	/^void Color4::lerp(float t,Color3& newColor)$/;"	f	class:Color4
lerp	math/Color.cpp	/^void Color4::lerp(float t,Color4& newColor)$/;"	f	class:Color4
lin_solve	effect/Fluid3D.cpp	/^static void lin_solve(int b, float *x, float *x0, float a, float c, int iter, int N)$/;"	f	file:
linearSolver	effect/Fluid.cpp	/^void StarFluid::linearSolver( int bound, float* __restrict x, const float* __restrict x0, float a, float c )$/;"	f	class:StarFluid
linearSolverProject	effect/Fluid.cpp	/^void StarFluid::linearSolverProject( Vec2* __restrict pdiv )$/;"	f	class:StarFluid
linearSolverRGB	effect/Fluid.cpp	/^void StarFluid::linearSolverRGB( float a, float c )$/;"	f	class:StarFluid
linearSolverUV	effect/Fluid.cpp	/^void StarFluid::linearSolverUV( float a, float c )$/;"	f	class:StarFluid
max	tool/StarUtil.h	/^T max(T a, T b)$/;"	f
min	tool/StarUtil.h	/^T min(T a, T b)$/;"	f
nowPos	tool/StarTouch.h	/^	Vec2 nowPos[MAX_FINGERS];	$/;"	m	class:StarTouch
octaves	effect/Perlin.h	/^    int octaves, randomseed;$/;"	m	class:PerlinNoise
operator *	math/Color.cpp	/^Color3 Color3::operator*(__COLOR__TYPE__ in_Scalar)const$/;"	f	class:Color3
operator *	math/Color.cpp	/^Color3 Color3::operator*(const Color3& in_Color)const$/;"	f	class:Color3
operator *	math/Color.cpp	/^Color4 Color4::operator*(__COLOR__TYPE__ in_Scalar)const$/;"	f	class:Color4
operator *	math/Color.cpp	/^Color4 Color4::operator*(const Color4& in_Color)const$/;"	f	class:Color4
operator *	math/Vector.cpp	/^Vec2 Vec2::operator*(const Vec2& in_Vector)const$/;"	f	class:Vec2
operator *	math/Vector.cpp	/^Vec2 Vec2::operator*(const __VERTEX__TYPE__& in_Scalar)const$/;"	f	class:Vec2
operator *	math/Vector.cpp	/^Vec3 Vec3::operator*(const Vec3& in_Vector)const$/;"	f	class:Vec3
operator *	math/Vector.cpp	/^Vec3 Vec3::operator*(const __VERTEX__TYPE__& in_Scalar)const$/;"	f	class:Vec3
operator *	math/Vector.cpp	/^Vec4 Vec4::operator*(const Vec4& in_Vector)const$/;"	f	class:Vec4
operator *	math/Vector.cpp	/^Vec4 Vec4::operator*(const __VERTEX__TYPE__& in_Scalar)const$/;"	f	class:Vec4
operator *=	math/Color.cpp	/^void Color3::operator*=(__COLOR__TYPE__ in_Scalar)$/;"	f	class:Color3
operator *=	math/Color.cpp	/^void Color3::operator*=(const Color3& in_Color)$/;"	f	class:Color3
operator *=	math/Color.cpp	/^void Color4::operator*=(__COLOR__TYPE__ in_Scalar)$/;"	f	class:Color4
operator *=	math/Color.cpp	/^void Color4::operator*=(const Color4& in_Color)$/;"	f	class:Color4
operator *=	math/Vector.cpp	/^Vec2& Vec2::operator*=(const Vec2& in_Vector)$/;"	f	class:Vec2
operator *=	math/Vector.cpp	/^Vec2& Vec2::operator*=(const __VERTEX__TYPE__& in_Scalar)$/;"	f	class:Vec2
operator *=	math/Vector.cpp	/^Vec3& Vec3::operator*=(const Vec3& in_Vector)$/;"	f	class:Vec3
operator *=	math/Vector.cpp	/^Vec3& Vec3::operator*=(const __VERTEX__TYPE__& in_Scalar)$/;"	f	class:Vec3
operator *=	math/Vector.cpp	/^Vec4& Vec4::operator*=(const Vec4& in_Vector)$/;"	f	class:Vec4
operator *=	math/Vector.cpp	/^Vec4& Vec4::operator*=(const __VERTEX__TYPE__& in_Scalar)$/;"	f	class:Vec4
operator +	math/Color.cpp	/^Color3 Color3::operator+(__COLOR__TYPE__ in_Scalar)const$/;"	f	class:Color3
operator +	math/Color.cpp	/^Color3 Color3::operator+(const Color3& in_Color)const$/;"	f	class:Color3
operator +	math/Color.cpp	/^Color4 Color4::operator+(__COLOR__TYPE__ in_Scalar)const$/;"	f	class:Color4
operator +	math/Color.cpp	/^Color4 Color4::operator+(const Color4& in_Color)const$/;"	f	class:Color4
operator +	math/Vector.cpp	/^Vec2 Vec2::operator+(const Vec2& in_Vector)const$/;"	f	class:Vec2
operator +	math/Vector.cpp	/^Vec2 Vec2::operator+(const __VERTEX__TYPE__& in_Scalar)const$/;"	f	class:Vec2
operator +	math/Vector.cpp	/^Vec3 Vec3::operator+(const Vec3& in_Vector)const$/;"	f	class:Vec3
operator +	math/Vector.cpp	/^Vec3 Vec3::operator+(const __VERTEX__TYPE__& in_Scalar)const$/;"	f	class:Vec3
operator +	math/Vector.cpp	/^Vec4 Vec4::operator+(const Vec4& in_Vector)const$/;"	f	class:Vec4
operator +	math/Vector.cpp	/^Vec4 Vec4::operator+(const __VERTEX__TYPE__& in_Scalar)const$/;"	f	class:Vec4
operator +=	math/Color.cpp	/^void Color3::operator+=(__COLOR__TYPE__ in_Scalar)$/;"	f	class:Color3
operator +=	math/Color.cpp	/^void Color3::operator+=(const Color3& in_Color)$/;"	f	class:Color3
operator +=	math/Color.cpp	/^void Color4::operator+=(__COLOR__TYPE__ in_Scalar)$/;"	f	class:Color4
operator +=	math/Color.cpp	/^void Color4::operator+=(const Color4& in_Color)$/;"	f	class:Color4
operator +=	math/Vector.cpp	/^Vec2& Vec2::operator+=(const Vec2& in_Vector)$/;"	f	class:Vec2
operator +=	math/Vector.cpp	/^Vec2& Vec2::operator+=(const __VERTEX__TYPE__& in_Scalar)$/;"	f	class:Vec2
operator +=	math/Vector.cpp	/^Vec3& Vec3::operator+=(const Vec3& in_Vector)$/;"	f	class:Vec3
operator +=	math/Vector.cpp	/^Vec3& Vec3::operator+=(const __VERTEX__TYPE__& in_Scalar)$/;"	f	class:Vec3
operator +=	math/Vector.cpp	/^Vec4& Vec4::operator+=(const Vec4& in_Vector)$/;"	f	class:Vec4
operator +=	math/Vector.cpp	/^Vec4& Vec4::operator+=(const __VERTEX__TYPE__& in_Scalar)$/;"	f	class:Vec4
operator -	math/Color.cpp	/^Color3 Color3::operator-(__COLOR__TYPE__ in_Scalar)const$/;"	f	class:Color3
operator -	math/Color.cpp	/^Color3 Color3::operator-(const Color3& in_Color)const$/;"	f	class:Color3
operator -	math/Color.cpp	/^Color4 Color4::operator-(__COLOR__TYPE__ in_Scalar)const$/;"	f	class:Color4
operator -	math/Color.cpp	/^Color4 Color4::operator-(const Color4& in_Color)const$/;"	f	class:Color4
operator -	math/Vector.cpp	/^Vec2 Vec2::operator-(const Vec2& in_Vector)const$/;"	f	class:Vec2
operator -	math/Vector.cpp	/^Vec2 Vec2::operator-(const __VERTEX__TYPE__& in_Scalar)const$/;"	f	class:Vec2
operator -	math/Vector.cpp	/^Vec3 Vec3::operator-(const Vec3& in_Vector)const$/;"	f	class:Vec3
operator -	math/Vector.cpp	/^Vec3 Vec3::operator-(const __VERTEX__TYPE__& in_Scalar)const$/;"	f	class:Vec3
operator -	math/Vector.cpp	/^Vec4 Vec4::operator-(const Vec4& in_Vector)const$/;"	f	class:Vec4
operator -	math/Vector.cpp	/^Vec4 Vec4::operator-(const __VERTEX__TYPE__& in_Scalar)const$/;"	f	class:Vec4
operator -=	math/Color.cpp	/^void Color3::operator-=(__COLOR__TYPE__ in_Scalar)$/;"	f	class:Color3
operator -=	math/Color.cpp	/^void Color3::operator-=(const Color3& in_Color)$/;"	f	class:Color3
operator -=	math/Color.cpp	/^void Color4::operator-=(__COLOR__TYPE__ in_Scalar)$/;"	f	class:Color4
operator -=	math/Color.cpp	/^void Color4::operator-=(const Color4& in_Color)$/;"	f	class:Color4
operator -=	math/Vector.cpp	/^Vec2& Vec2::operator-=(const Vec2& in_Vector)$/;"	f	class:Vec2
operator -=	math/Vector.cpp	/^Vec2& Vec2::operator-=(const __VERTEX__TYPE__& in_Scalar)$/;"	f	class:Vec2
operator -=	math/Vector.cpp	/^Vec3& Vec3::operator-=(const Vec3& in_Vector)$/;"	f	class:Vec3
operator -=	math/Vector.cpp	/^Vec3& Vec3::operator-=(const __VERTEX__TYPE__& in_Scalar)$/;"	f	class:Vec3
operator -=	math/Vector.cpp	/^Vec4& Vec4::operator-=(const Vec4& in_Vector)$/;"	f	class:Vec4
operator -=	math/Vector.cpp	/^Vec4& Vec4::operator-=(const __VERTEX__TYPE__& in_Scalar)$/;"	f	class:Vec4
operator /	math/Color.cpp	/^Color3 Color3::operator\/(__COLOR__TYPE__ in_Scalar)const$/;"	f	class:Color3
operator /	math/Color.cpp	/^Color3 Color3::operator\/(const Color3& in_Color)const$/;"	f	class:Color3
operator /	math/Color.cpp	/^Color4 Color4::operator\/(__COLOR__TYPE__ in_Scalar)const$/;"	f	class:Color4
operator /	math/Color.cpp	/^Color4 Color4::operator\/(const Color4& in_Color)const$/;"	f	class:Color4
operator /	math/Vector.cpp	/^Vec2 Vec2::operator\/(const Vec2& in_Vector)const$/;"	f	class:Vec2
operator /	math/Vector.cpp	/^Vec2 Vec2::operator\/(const __VERTEX__TYPE__& in_Scalar)const$/;"	f	class:Vec2
operator /	math/Vector.cpp	/^Vec3 Vec3::operator\/(const Vec3& in_Vector)const$/;"	f	class:Vec3
operator /	math/Vector.cpp	/^Vec3 Vec3::operator\/(const __VERTEX__TYPE__& in_Scalar)const$/;"	f	class:Vec3
operator /	math/Vector.cpp	/^Vec4 Vec4::operator\/(const Vec4& in_Vector)const$/;"	f	class:Vec4
operator /	math/Vector.cpp	/^Vec4 Vec4::operator\/(const __VERTEX__TYPE__& in_Scalar)const$/;"	f	class:Vec4
operator /=	math/Color.cpp	/^void Color3::operator\/=(__COLOR__TYPE__ in_Scalar)$/;"	f	class:Color3
operator /=	math/Color.cpp	/^void Color3::operator\/=(const Color3& in_Color)$/;"	f	class:Color3
operator /=	math/Color.cpp	/^void Color4::operator\/=(__COLOR__TYPE__ in_Scalar)$/;"	f	class:Color4
operator /=	math/Color.cpp	/^void Color4::operator\/=(const Color4& in_Color)$/;"	f	class:Color4
operator /=	math/Vector.cpp	/^Vec2& Vec2::operator\/=(const Vec2& in_Vector)$/;"	f	class:Vec2
operator /=	math/Vector.cpp	/^Vec2& Vec2::operator\/=(const __VERTEX__TYPE__& in_Scalar)$/;"	f	class:Vec2
operator /=	math/Vector.cpp	/^Vec3& Vec3::operator\/=(const Vec3& in_Vector)$/;"	f	class:Vec3
operator /=	math/Vector.cpp	/^Vec3& Vec3::operator\/=(const __VERTEX__TYPE__& in_Scalar)$/;"	f	class:Vec3
operator /=	math/Vector.cpp	/^Vec4& Vec4::operator\/=(const Vec4& in_Vector)$/;"	f	class:Vec4
operator /=	math/Vector.cpp	/^Vec4& Vec4::operator\/=(const __VERTEX__TYPE__& in_Scalar)$/;"	f	class:Vec4
operator =	math/Vector.cpp	/^Vec2& Vec2::operator=(const __VERTEX__TYPE__& in_Scalar)$/;"	f	class:Vec2
operator =	math/Vector.cpp	/^Vec3& Vec3::operator=(const __VERTEX__TYPE__& in_Scalar)$/;"	f	class:Vec3
operator =	math/Vector.cpp	/^Vec4& Vec4::operator=(const __VERTEX__TYPE__& in_Scalar)$/;"	f	class:Vec4
operator []	math/Matrix.h	/^		__MATRIX__TYPE__* operator[] (const unsigned int row)$/;"	f	class:Matrix
operator []	math/Vector.cpp	/^Vec2& Vec2::operator[](int index)$/;"	f	class:Vec2
operator []	math/Vector.cpp	/^Vec3& Vec3::operator[](int index)$/;"	f	class:Vec3
operator []	math/Vector.cpp	/^const Vec2& Vec2::operator[](int index) const$/;"	f	class:Vec2
operator []	math/Vector.cpp	/^const Vec3& Vec3::operator[](int index) const$/;"	f	class:Vec3
persistence	effect/Perlin.h	/^    double persistence, frequency, amplitude;$/;"	m	class:PerlinNoise
prePos	tool/StarTouch.h	/^	Vec2 prePos[MAX_FINGERS];$/;"	m	class:StarTouch
project	effect/Fluid.cpp	/^void StarFluid::project(Vec2* xy, Vec2* pDiv)$/;"	f	class:StarFluid
project	effect/Fluid3D.cpp	/^static void project(float *velocX, float *velocY, float *velocZ, float *p, float *div, int iter, int N)$/;"	f	file:
r	math/Color.h	/^		__COLOR__TYPE__ r;$/;"	m	class:Color3
r	math/Color.h	/^		__COLOR__TYPE__ r;$/;"	m	class:Color4
randomizeColor	effect/Fluid.cpp	/^void StarFluid::randomizeColor() {$/;"	f	class:StarFluid
randomseed	effect/Perlin.h	/^    int octaves, randomseed;$/;"	m	class:PerlinNoise
reset	effect/Fluid.cpp	/^void StarFluid::reset() {$/;"	f	class:StarFluid
s	effect/Fluid3D.h	/^    float *s;$/;"	m	struct:FluidCube
s	math/Matrix.h	/^		__MATRIX__TYPE__ s[16];$/;"	m	class:Matrix
s_ColorRenderBuffer	renderer/StarFBO.h	/^    GLuint s_ColorRenderBuffer;$/;"	m	class:StarFBO
s_DepthRenderBuffer	renderer/StarFBO.h	/^    GLuint s_DepthRenderBuffer;$/;"	m	class:StarFBO
s_FrameBuffer	renderer/StarFBO.h	/^    GLuint s_FrameBuffer;$/;"	m	class:StarFBO
setBoundary	effect/Fluid.cpp	/^void StarFluid::setBoundary(int bound, float* x)$/;"	f	class:StarFluid
setBoundary02d	effect/Fluid.cpp	/^void StarFluid::setBoundary02d(Vec2* x)$/;"	f	class:StarFluid
setBoundary2d	effect/Fluid.cpp	/^void StarFluid::setBoundary2d( int bound, Vec2 *xy )$/;"	f	class:StarFluid
setBoundaryRGB	effect/Fluid.cpp	/^void StarFluid::setBoundaryRGB()$/;"	f	class:StarFluid
setColorDiffusion	effect/Fluid.cpp	/^StarFluid& StarFluid::setColorDiffusion( float diff )$/;"	f	class:StarFluid
setDeltaT	effect/Fluid.cpp	/^StarFluid&  StarFluid::setDeltaT(float deltaT) {$/;"	f	class:StarFluid
setFadeSpeed	effect/Fluid.cpp	/^StarFluid&  StarFluid::setFadeSpeed(float fadeSpeed) {$/;"	f	class:StarFluid
setSize	effect/Fluid.cpp	/^StarFluid& StarFluid::setSize(int NX, int NY)$/;"	f	class:StarFluid
setSolverIterations	effect/Fluid.cpp	/^StarFluid&  StarFluid::setSolverIterations(int solverIterations) {$/;"	f	class:StarFluid
setVisc	effect/Fluid.cpp	/^StarFluid& StarFluid::setVisc(float newVisc) {$/;"	f	class:StarFluid
setWrap	effect/Fluid.cpp	/^StarFluid& StarFluid::setWrap( bool bx, bool by ) {$/;"	f	class:StarFluid
set_bnd	effect/Fluid3D.cpp	/^static void set_bnd(int b, float *x, int N)$/;"	f	file:
setup	effect/Fluid.cpp	/^StarFluid& StarFluid::setup(int NX, int NY)$/;"	f	class:StarFluid
size	effect/Fluid3D.h	/^    int size;$/;"	m	struct:FluidCube
solverIterations	effect/Fluid.h	/^    int		solverIterations;$/;"	m	class:StarFluid
starDelegate	tool/StarTimer.cpp	/^Star *starDelegate;$/;"	v
startTick	tool/StarTimer.cpp	/^void StarTimer::startTick()$/;"	f	class:StarTimer
swap	tool/StarUtil.h	/^void swap(T& a, T& b)$/;"	f
texture_height	renderer/StarTexture.h	/^    unsigned int texture_width, texture_height;$/;"	m	class:StarTexture
texture_id	renderer/StarTexture.h	/^	GLuint texture_id;$/;"	m	class:StarTexture
texture_width	renderer/StarTexture.h	/^    unsigned int texture_width, texture_height;$/;"	m	class:StarTexture
time4Testing	tool/StarTimer.h	/^    unsigned long  long time4Testing;$/;"	m	class:StarTimer
update	effect/Fluid.cpp	/^void StarFluid::update() {$/;"	f	class:StarFluid
uv	effect/Fluid.h	/^    Vec2	*uv, *uvOld;$/;"	m	class:StarFluid
uvOld	effect/Fluid.h	/^    Vec2	*uv, *uvOld;$/;"	m	class:StarFluid
visc	effect/Fluid3D.h	/^    float visc;$/;"	m	struct:FluidCube
viscocity	effect/Fluid.h	/^    float	viscocity;$/;"	m	class:StarFluid
vorticityConfinement	effect/Fluid.cpp	/^void StarFluid::vorticityConfinement(Vec2* Fvc_xy) {$/;"	f	class:StarFluid
w	math/Vector.h	/^		__VERTEX__TYPE__ w;$/;"	m	class:Vec4
width	effect/Fluid.h	/^    float width;$/;"	m	class:StarFluid
wrap_x	effect/Fluid.h	/^    bool	wrap_x;$/;"	m	class:StarFluid
wrap_y	effect/Fluid.h	/^    bool	wrap_y;$/;"	m	class:StarFluid
x	math/Vector.h	/^		__VERTEX__TYPE__ x;$/;"	m	class:Vec2
x	math/Vector.h	/^		__VERTEX__TYPE__ x;$/;"	m	class:Vec3
x	math/Vector.h	/^		__VERTEX__TYPE__ x;$/;"	m	class:Vec4
y	math/Vector.h	/^		__VERTEX__TYPE__ y;$/;"	m	class:Vec2
y	math/Vector.h	/^		__VERTEX__TYPE__ y;$/;"	m	class:Vec3
y	math/Vector.h	/^		__VERTEX__TYPE__ y;$/;"	m	class:Vec4
z	math/Vector.h	/^		__VERTEX__TYPE__ z;$/;"	m	class:Vec3
z	math/Vector.h	/^		__VERTEX__TYPE__ z;$/;"	m	class:Vec4
zero	math/Vector.h	/^		void zero()$/;"	f	class:Vec2
zero	math/Vector.h	/^		void zero()$/;"	f	class:Vec3
zero	math/Vector.h	/^		void zero()$/;"	f	class:Vec4
~StarFluid	effect/Fluid.cpp	/^StarFluid::~StarFluid() {$/;"	f	class:StarFluid
